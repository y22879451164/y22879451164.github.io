<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Person Blog</title><link>https://y22879451164.github.io</link><description>一个简单的个人博客</description><copyright>Person Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/117916814?s=400&amp;u=58268283f36239a32aca522406e8a2a2415483a4&amp;v=4</url><title>avatar</title><link>https://y22879451164.github.io</link></image><lastBuildDate>Sat, 15 Mar 2025 06:56:58 +0000</lastBuildDate><managingEditor>Person Blog</managingEditor><ttl>60</ttl><webMaster>Person Blog</webMaster><item><title>SpringBoot接口开发的常用注解</title><link>https://y22879451164.github.io/post/SpringBoot-jie-kou-kai-fa-de-chang-yong-zhu-jie.html</link><description>1. `@Controller`标记此类是一个控制器，可以返回视图解析器指定的html页面，通过`@ResponseBody`可以将结果返回json、xml数据。</description><guid isPermaLink="true">https://y22879451164.github.io/post/SpringBoot-jie-kou-kai-fa-de-chang-yong-zhu-jie.html</guid><pubDate>Fri, 14 Mar 2025 12:53:44 +0000</pubDate></item><item><title>SpringBoot常用配置类</title><link>https://y22879451164.github.io/post/SpringBoot-chang-yong-pei-zhi-lei.html</link><description>### java格式化时间配置

``` java
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@Configuration
public class LocalDateTimeConfig {

    /*
     * 序列化内容
     *   LocalDateTime -&gt; String
     * 服务端返回给客户端内容
     * */
    @Bean
    public LocalDateTimeSerializer localDateTimeSerializer() {
        return new LocalDateTimeSerializer(DateTimeFormatter.ofPattern('yyyy-MM-dd HH:mm:ss'));
    }

    /*
     * 反序列化内容
     *   String -&gt; LocalDateTime
     * 客户端传入服务端数据
     * */
    @Bean
    public LocalDateTimeDeserializer localDateTimeDeserializer() {
        return new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern('yyyy-MM-dd HH:mm:ss'));
    }


    // 配置
    @Bean
    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {
        return builder -&gt; {
            builder.serializerByType(LocalDateTime.class, localDateTimeSerializer());
            builder.deserializerByType(LocalDateTime.class, localDateTimeDeserializer());
        };
    }

}
```
### 实现跨域请求配置
``` java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;


@Configuration
public class GlobalCorsConfig {

    @Bean
    public CorsFilter corsFilter() {

        CorsConfiguration config = new CorsConfiguration();
        //允许白名单域名进行跨域调用
        config.addAllowedOrigin('*');
        //允许跨越发送cookie
        config.setAllowCredentials(true);
        //放行全部原始头信息
        config.addAllowedHeader('*');
        //允许所有请求方法跨域调用
        config.addAllowedMethod('*');
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration('/**', config);
        return new CorsFilter(source);

    }
}
```
### mybatis-plus分页拦截器
``` java
import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
@MapperScan('com.example.test.mapper')
public class MybatisPlusConfig {
	/**
	 * 新的分页插件
	 * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false
	 * 避免缓存出现问题(该属性会在旧插件移除后一同移除)
	 */
	@Bean
	public MybatisPlusInterceptor mybatisPlusInterceptor() {
		MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
		interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
		return interceptor;
	}
}
```。</description><guid isPermaLink="true">https://y22879451164.github.io/post/SpringBoot-chang-yong-pei-zhi-lei.html</guid><pubDate>Fri, 14 Mar 2025 12:28:27 +0000</pubDate></item><item><title>Sentinel使用</title><link>https://y22879451164.github.io/post/Sentinel-shi-yong.html</link><description>## 管理控制台
首先下载控制台的jar包
[https://github.com/alibaba/Sentinel/releases](url)
修改文件名为sentinel-dashboard.jar，然后使用以下命令启动：
```powershell
java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar
```
启动成功后，访问[http://localhost:8090](url)，默认登录的用户名和密码都是sentinel.

## 微服务整合
引入sentinel依赖:
```xml
&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud-alibaba.version}&lt;/version&gt;
&lt;/dependency&gt;
```
修改application.yaml文件，添加如下内容：
```yaml
spring:
  cloud:
    sentinel:
      transport:
        dashboard: localhost:8090 #配置Sentinel dashboard地址
```。</description><guid isPermaLink="true">https://y22879451164.github.io/post/Sentinel-shi-yong.html</guid><pubDate>Mon, 20 Jan 2025 04:23:37 +0000</pubDate></item><item><title>Git的基础使用</title><link>https://y22879451164.github.io/post/Git-de-ji-chu-shi-yong.html</link><description>### 添加工作区到暂存区&#13;
作用：添加工作区一个或多个文件的修改到暂存区&#13;
命令形式：git add 单个文件名|通配符&#13;
将所有修改加入暂存区：`git add .`&#13;
### 提交暂存区到本地仓库&#13;
作用：提交暂存区汇总所有内容到本地仓库的当前分支&#13;
命令形式：`git commit -m ‘注释内容’`&#13;
### 版本回退&#13;
作用：版本切换&#13;
命令形式：`git reset --hard commitID`&#13;
commitID 可以使用 `git-log` 或 `git log`指令查看&#13;
查看已经删除的记录：&#13;
`git reflog`&#13;
所以&#13;
`git reset --hard commitID`既可以做版本回退，也可以做版本还原&#13;
### 创建本地分支&#13;
命令：`git branch 分支名`&#13;
创建的新分支会建立在当前分支的版本之上，所以新建的分支会有当前分支的内容&#13;
### 切换分支&#13;
命令：`git checkout 分支名`&#13;
我们还可以直接切换到一个不存在的分支（创建并切换）&#13;
命令：`git checkout -b 分支名`&#13;
### 合并分支&#13;
命令：`git merge 分支名称`&#13;
### 删除分支&#13;
不能删除当前分支，只能删除其他分支&#13;
`git branch -d b1` 删除分支时，需要做各种检查&#13;
`git branch -D b1` 不做任何检查，强制删除&#13;
### 操作远程仓库&#13;
命令： `git remote add &lt;远端名称&gt; &lt;仓库路径SSH&gt;`&#13;
远端名称，默认是origin，取决于远端服务器设置&#13;
仓库路径，从远端服务器获取此SSH&#13;
### 推送到远程仓库&#13;
命令：`git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]`&#13;
如果远程分支名和本地分支名称相同，则可以只写本地分支&#13;
​本来是：`git push origin master ：master` 表示将本地仓库的master分支提交到远程仓库的master分支&#13;
`git push origin master` 这里表示将本地仓库当前master分支的内容推到远程仓库上面去&#13;
-f 表示强制覆盖&#13;
–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</description><guid isPermaLink="true">https://y22879451164.github.io/post/Git-de-ji-chu-shi-yong.html</guid><pubDate>Thu, 05 Dec 2024 13:46:26 +0000</pubDate></item></channel></rss>